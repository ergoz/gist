types:
    nil, boolean, number, string, userdata, function, thread, and table

expressions:
    arithmetic        ^ + - * / %
    relational        > < <= >= == ~=
    logical           and or not
    concatenation     ..
    table constructor {}

precedence rule:
    ^
    not # -(unary) * / %
    + -
    ..
    < > <= >= ~= == and
    or

conventional statements:
    assignment, control structures, functions,
    multiple assignments, local variable declaration


You should avoid identifiers starting with an underscore followed by one or
more upper-case letters (e.g., _VERSION); they are reserved for special uses
in Lua. Usually, I reserve the identifier _ (a single underscore) for dummy
variables.


Reserved keywords,
    local false true
    and not or nil
    function if else elseif then do while until repeat break for in end return


--[[
     print(10)        -- no action (comment)
--]]
To reactivate the code, we add a single hyphen to the first line:
---[[
    print(10)         --> 10
--]]


It is not an error to access a non-initialized variable; you just get the
special value nil as the result
    print(b)  --> nil
    b = 10    -- Global assignment
    print(b)  --> 10
In other words, a global variable is existent if (and only if) it has a
non-nil value.


Before running its arguments, lua looks for an environment variable named
LUA_INIT. If there is such a variable and its content is @filename, then lua
runs the given file. If LUA_INIT is defined but does not start with ‘@’, then
lua assumes that it contains Lua code and runs it.


for command line, 
    % lua -e "sin=math.sin" script a b
lua collects the arguments as follows,
    arg[-3] = "lua"
    arg[-2] = "-e"
    arg[-1] = "sin=math.sin"
    arg[0] = "script"
    arg[1] = "a"
    arg[2] = "b"
a script can also retrieve its arguments through the `vararg` syntax.


In a multiple assignment, Lua first evaluates all values and only then exe-
cutes the assignments. Therefore, we can use a multiple assignment to swap two
values, as in
    x, y = y, x                -- swap ’x’ for ’y’
Lua always adjusts the number of values to the number of variables: when the
list of values is shorter than the list of variables, the extra variables
receive nil as their values; when the list of values is longer, the extra
values are silently discarded


A block is the body of a control structure, the body of a function, or a chunk
(the file or string where the variable is declared)
A common idiom in Lua is,
     local foo = foo
