I am looking into the rust's libcore source.

rust/src/libcore/cmp.rs:463

    // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types
    mod impls {
        // .... some code
        macro_rules! partial_eq_impl {
            ($($t:ty)*) => ($(
                #[stable(feature = "rust1", since = "1.0.0")]
                impl PartialEq for $t {
                    #[inline]
                    fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
                    #[inline]
                    fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
                }
            )*)
        }
        // .... some code
        partial_eq_impl! {
            bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64
        }
        // .... some code
    }

In the above implementation of PartialEq for primitive types,
   fn eq(&self, other: &$t) -> bool { (*self) == (*other) }

the `==` operation in `(*self) == (*other)` is built-into the compiler ?
If so, why is it required to implement the PartialEq::eq() function for
primitive types ?
