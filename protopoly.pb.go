// Code generated by protoc-gen-go.
// source: protopoly.proto
// DO NOT EDIT!

/*
Package protopoly is a generated protocol buffer package.

It is generated from these files:
	protopoly.proto

It has these top-level messages:
	Animal
	Cat
	Dog
*/
package protopoly

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Animal_Type int32

const (
	Animal_Cat Animal_Type = 1
	Animal_Dog Animal_Type = 2
)

var Animal_Type_name = map[int32]string{
	1: "Cat",
	2: "Dog",
}
var Animal_Type_value = map[string]int32{
	"Cat": 1,
	"Dog": 2,
}

func (x Animal_Type) Enum() *Animal_Type {
	p := new(Animal_Type)
	*p = x
	return p
}
func (x Animal_Type) String() string {
	return proto.EnumName(Animal_Type_name, int32(x))
}
func (x *Animal_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Animal_Type_value, data, "Animal_Type")
	if err != nil {
		return err
	}
	*x = Animal_Type(value)
	return nil
}

type Animal struct {
	Type             *Animal_Type              `protobuf:"varint,1,req,name=type,enum=Animal_Type" json:"type,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Animal) Reset()         { *m = Animal{} }
func (m *Animal) String() string { return proto.CompactTextString(m) }
func (*Animal) ProtoMessage()    {}

var extRange_Animal = []proto.ExtensionRange{
	{100, 536870911},
}

func (*Animal) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Animal
}
func (m *Animal) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *Animal) GetType() Animal_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Animal_Cat
}

type Cat struct {
	// These fields can use the full number range.
	Declawed         *bool  `protobuf:"varint,1,opt,name=declawed" json:"declawed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Cat) Reset()         { *m = Cat{} }
func (m *Cat) String() string { return proto.CompactTextString(m) }
func (*Cat) ProtoMessage()    {}

func (m *Cat) GetDeclawed() bool {
	if m != nil && m.Declawed != nil {
		return *m.Declawed
	}
	return false
}

var E_Cat_Animal = &proto.ExtensionDesc{
	ExtendedType:  (*Animal)(nil),
	ExtensionType: (*Cat)(nil),
	Field:         100,
	Name:          "Cat.animal",
	Tag:           "bytes,100,req,name=animal",
}

type Dog struct {
	// These fields can use the full number range.
	BonesBuried      *uint32 `protobuf:"varint,1,opt,name=bones_buried" json:"bones_buried,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Dog) Reset()         { *m = Dog{} }
func (m *Dog) String() string { return proto.CompactTextString(m) }
func (*Dog) ProtoMessage()    {}

func (m *Dog) GetBonesBuried() uint32 {
	if m != nil && m.BonesBuried != nil {
		return *m.BonesBuried
	}
	return 0
}

var E_Dog_Animal = &proto.ExtensionDesc{
	ExtendedType:  (*Animal)(nil),
	ExtensionType: (*Dog)(nil),
	Field:         101,
	Name:          "Dog.animal",
	Tag:           "bytes,101,req,name=animal",
}

func init() {
	proto.RegisterEnum("Animal_Type", Animal_Type_name, Animal_Type_value)
	proto.RegisterExtension(E_Cat_Animal)
	proto.RegisterExtension(E_Dog_Animal)
}
